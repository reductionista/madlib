/* ---------------------------------------------------------------------*//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *//* ---------------------------------------------------------------------*/

--\i m4_regexp(MODULE_PATHNAME,
--             `\(.*\)libmadlib\.so',
--             `\1../../modules/deep_learning/test/madlib_keras.setup.sql_in'
--)

m4_include(`SQLCommon.m4')

\i PATH_TO_SQL_TESTS(`madlib_keras.setup.sql_in')

-- -- Please do not break up the compile_params string
-- -- It might break the assertion
DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_saved_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['mae']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    3,
    NULL,
    'cifar_10_sample_val');

SELECT assert(
        model_arch_table = 'model_arch' AND
        model_arch_id = 1 AND
        model_type = 'madlib_keras' AND
        start_training_time         < now() AND
        end_training_time > start_training_time AND
        source_table = 'cifar_10_sample_batched' AND
        validation_table = 'cifar_10_sample_val' AND
        model = 'keras_saved_out' AND
        dependent_varname = 'y' AND
        dependent_vartype = 'smallint' AND
        independent_varname = 'x' AND
        normalizing_const = 255.0 AND
        pg_typeof(normalizing_const) = 'real'::regtype AND
        name is NULL AND
        description is NULL AND
        model_size > 0 AND
        madlib_version is NOT NULL AND
        compile_params = $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['mae']$$::text AND
        fit_params = $$ batch_size=2, epochs=1, verbose=0 $$::text AND
        num_iterations = 3 AND
        metrics_compute_frequency = 3 AND
        num_classes = 2 AND
        class_values = '{0,1}' AND
        metrics_type = '{mae}' AND
        training_metrics_final >= 0  AND
        training_loss_final  >= 0  AND
        array_upper(training_metrics, 1) = 1 AND
        array_upper(training_loss, 1) = 1 AND
        array_upper(metrics_elapsed_time, 1) = 1 AND
        validation_metrics_final >= 0 AND
        validation_loss_final  >= 0  AND
        array_upper(validation_metrics, 1) = 1 AND
        array_upper(validation_loss, 1) = 1 ,
        'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_saved_out_summary) summary;

SELECT assert(
        model_data IS NOT NULL AND
        model_arch IS NOT NULL, 'Keras model output validation failed. Actual:' || __to_char(k))
FROM (SELECT * FROM keras_saved_out) k;

-- Test that evaluate works as expected:
DROP TABLE IF EXISTS evaluate_out;
SELECT madlib_keras_evaluate('keras_saved_out', 'cifar_10_sample_val', 'evaluate_out', 0);

SELECT assert(loss IS NOT NULL AND
        metric IS NOT NULL AND
        metrics_type = '{mae}', 'Evaluate output validation failed.  Actual:' || __to_char(evaluate_out))
FROM evaluate_out;

-- Test that passing NULL / None instead of 0 for gpus_per_host works
DROP TABLE IF EXISTS evaluate_out;
SELECT madlib_keras_evaluate('keras_saved_out', 'cifar_10_sample_val', 'evaluate_out');
SELECT assert(loss IS NOT NULL AND
        metric IS NOT NULL AND
        metrics_type = '{mae}', 'Evaluate output validation failed.  Actual:' || __to_char(evaluate_out))
FROM evaluate_out;

-- Test that evaluate errors out correctly if model_arch field missing from fit output
DROP TABLE IF EXISTS evaluate_out;
ALTER TABLE keras_saved_out DROP COLUMN model_arch;
SELECT assert(trap_error($TRAP$
	SELECT madlib_keras_evaluate('keras_saved_out', 'cifar_10_sample_val', 'evaluate_out');
	$TRAP$) = 1, 'Should error out if model_arch column is missing from model_table');

-- Verify number of iterations for which metrics and loss are computed
DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_saved_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    7,
    NULL,
    'cifar_10_sample_val',
    4);
SELECT assert(
        num_iterations = 7 AND
        metrics_compute_frequency = 4 AND
        training_metrics_final >= 0  AND
        training_loss_final  >= 0  AND
        metrics_type = '{accuracy}' AND
        array_upper(training_metrics, 1) = 2 AND
        array_upper(training_loss, 1) = 2 AND
        array_upper(metrics_elapsed_time, 1) = 2 AND
        validation_metrics_final >= 0 AND
        validation_loss_final  >= 0  AND
        array_upper(validation_metrics, 1) = 2 AND
        array_upper(validation_loss, 1) = 2 ,
        'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_saved_out_summary) summary;
-- Fit with gpus_per_host set to 2 must error out on machines
-- that don't have GPUs. Since Jenkins builds are run on docker containers
-- that don't have GPUs, these queries must error out.
DROP TABLE IF EXISTS keras_saved_out_gpu, keras_saved_out_gpu_summary;
SELECT assert(trap_error($TRAP$madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_saved_out_gpu',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    3,
    2,
    'cifar_10_sample_val');$TRAP$) = 1,
       'Fit with gpus_per_host=2 must error out.');

-- Prediction with gpus_per_host set to 2 must error out on machines
-- that don't have GPUs. Since Jenkins builds are run on docker containers
-- that don't have GPUs, these queries must error out.

-- IMPORTANT: The following test must be run when we have a valid
-- keras_saved_out model table. Otherwise, it will fail because of a
-- non-existent model table, while we want to trap failure due to
-- gpus_per_host=2
DROP TABLE IF EXISTS cifar10_predict_gpu;
SELECT assert(trap_error($TRAP$madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample',
    'id',
    'x',
    'cifar10_predict_gpu',
    NULL,
    2);$TRAP$) = 1,
    'Prediction with gpus_per_host=2 must error out.');

-- Test for
  -- Non null name and description columns
	-- Null validation table
DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    2,
    NULL,
    NULL,
    1,
    NULL,
    'model name',
    'model desc');

SELECT assert(
    source_table = 'cifar_10_sample_batched' AND
    model = 'keras_out' AND
    dependent_varname = 'y' AND
    independent_varname = 'x' AND
    model_arch_table = 'model_arch' AND
    model_arch_id = 1 AND
    compile_params = $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text AND
    fit_params = $$ batch_size=2, epochs=1, verbose=0 $$::text AND
    num_iterations = 2 AND
    validation_table is NULL AND
    metrics_compute_frequency = 1 AND
    name = 'model name' AND
    description = 'model desc' AND
    model_type = 'madlib_keras' AND
    model_size > 0 AND
    start_training_time         < now() AND
    end_training_time > start_training_time AND
    array_upper(metrics_elapsed_time, 1) = 2 AND
    dependent_vartype = 'smallint' AND
    madlib_version is NOT NULL AND
    num_classes = 2 AND
    class_values = '{0,1}' AND
    metrics_type = '{accuracy}' AND
    normalizing_const = 255.0 AND
    training_metrics_final is not NULL AND
    training_loss_final is not NULL AND
    array_upper(training_metrics, 1) = 2 AND
    array_upper(training_loss, 1) = 2 AND
    validation_metrics_final is  NULL AND
    validation_loss_final is  NULL AND
    validation_metrics is NULL AND
    validation_loss is NULL,
    'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_out_summary) summary;

SELECT assert(model_data IS NOT NULL , 'Keras model output validation failed') FROM (SELECT * FROM keras_out) k;

-- Validate metrics=NULL works with fit
DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
'cifar_10_sample_batched',
'keras_saved_out',
'model_arch',
1,
$$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy'$$::text,
$$ batch_size=2, epochs=1, verbose=0 $$::text,
1);

SELECT assert(
        metrics_type is NULL AND
        training_metrics IS NULL AND
        array_upper(training_loss, 1) = 1 AND
        array_upper(metrics_elapsed_time, 1) = 1 AND
        validation_metrics_final IS NULL AND
        validation_loss_final  >= 0  AND
        validation_metrics IS NULL AND
        array_upper(validation_loss, 1) = 1,
        'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_saved_out_summary) summary;

-- Validate that metrics=NULL works with evaluate
DROP TABLE IF EXISTS evaluate_out;
SELECT madlib_keras_evaluate('keras_saved_out', 'cifar_10_sample_val', 'evaluate_out', 0);

SELECT assert(loss IS NOT NULL AND
        metric IS NULL AND
        metrics_type IS NULL, 'Evaluate output validation for NULL metric failed.  Actual:' || __to_char(evaluate_out))
FROM evaluate_out;

-- Validate metrics=[] works with fit
DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
'cifar_10_sample_batched',
'keras_saved_out',
'model_arch',
1,
$$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=[]$$::text,
$$ batch_size=2, epochs=1, verbose=0 $$::text,
1);

SELECT assert(
        metrics_type IS NULL AND
        training_metrics IS NULL AND
        array_upper(training_loss, 1) = 1 AND
        array_upper(metrics_elapsed_time, 1) = 1 AND
        validation_metrics_final IS NULL AND
        validation_loss_final  >= 0  AND
        validation_metrics IS NULL AND
        array_upper(validation_loss, 1) = 1,
        'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_saved_out_summary) summary;

-- Validate metrics=[] works with evaluate
DROP TABLE IF EXISTS evaluate_out;
SELECT madlib_keras_evaluate('keras_saved_out', 'cifar_10_sample_val', 'evaluate_out', 0);

SELECT assert(loss IS NOT NULL AND
        metric IS NULL AND
        metrics_type IS NULL, 'Evaluate output validation for [] metric failed.  Actual:' || __to_char(evaluate_out))
FROM evaluate_out;

DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample',
    'id',
    'x',
    'cifar10_predict',
    NULL,
    0);

-- Validate that prediction output table exists and has correct schema
SELECT assert(UPPER(atttypid::regtype::TEXT) = 'INTEGER', 'id column should be INTEGER type')
    FROM pg_attribute WHERE attrelid = 'cifar10_predict'::regclass
        AND attname = 'id';

SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'SMALLINT', 'prediction column should be SMALLINT type')
    FROM pg_attribute WHERE attrelid = 'cifar10_predict'::regclass
        AND attname = 'estimated_y';

-- Validate correct number of rows returned.
SELECT assert(COUNT(*)=2, 'Output table of madlib_keras_predict should have two rows') FROM cifar10_predict;

-- First test that all values are in set of class values; if this breaks, it's definitely a problem.
SELECT assert(estimated_y IN (0,1),
              'Predicted value not in set of defined class values for model')
FROM cifar10_predict;

DROP TABLE IF EXISTS cifar10_predict;
SELECT assert(trap_error($TRAP$madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_batched',
    'id',
    'x',
    'cifar10_predict',
    NULL,
    0);$TRAP$) = 1,
    'Passing batched image table to predict should error out.');

-- Compile and fit parameter tests
DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_out',
    'model_arch',
    1,
    $$ optimizer='SGD', loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    1,
    NULL,
    NULL,
    NULL,
    NULL, 'model name', 'model desc');

DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_out',
    'model_arch',
    1,
    $$ optimizer='Adam()', loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    1,
    NULL,
    NULL,
    NULL,
    NULL, 'model name', 'model desc');

DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_out',
    'model_arch',
    1,
    $$ optimizer=Adam(epsilon=None), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    1,
    0,
    NULL,
    NULL,
    NULL, 'model name', 'model desc');

DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), metrics=['accuracy'], loss_weights=[2], sample_weight_mode=None, loss='categorical_crossentropy' $$::text,
    $$ epochs=10, verbose=0, shuffle=True, initial_epoch=1, steps_per_epoch=2 $$::text,
    1,
    NULL,
    NULL,
    NULL,
    False, 'model name', 'model desc');

DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_batched',
    'keras_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), metrics=['accuracy'], loss_weights=[2], sample_weight_mode=None, loss='categorical_crossentropy' $$::text,
    NULL,
    1,
    NULL,
    NULL,
    NULL,
    False, 'model name', 'model desc');

-- -- negative test case for passing non numeric y to fit
-- induce failure by passing a non numeric column
DROP TABLE IF EXISTS cifar_10_sample_val_failure;
CREATE TABLE cifar_10_sample_val_failure AS SELECT * FROM cifar_10_sample_val;
ALTER TABLE cifar_10_sample_val_failure rename dependent_var to dependent_var_original;
ALTER TABLE cifar_10_sample_val_failure rename buffer_id to dependent_var;
DROP TABLE IF EXISTS keras_out, keras_out_summary;
SELECT assert(trap_error($TRAP$madlib_keras_fit(
           'cifar_10_sample_batched',
           'keras_out',
           'model_arch',
           1,
           $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
           $$ batch_size=2, epochs=1, verbose=0 $$::text,
           2,
           NULL,
          'cifar_10_sample_val_failure');$TRAP$) = 1,
       'Passing y of type non numeric array to fit should error out.');

-- Test with pred_type=prob
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample',
    'id',
    'x',
    'cifar10_predict',
    'prob',
    0);

SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'column prob_0 should be double precision type')
    FROM pg_attribute WHERE attrelid = 'cifar10_predict'::regclass
        AND attname = 'prob_0';

SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'column prob_1 should be double precision type')
    FROM pg_attribute WHERE attrelid = 'cifar10_predict'::regclass
        AND attname = 'prob_1';

SELECT assert(COUNT(*)=3, 'Predict out table must have exactly three cols.')
FROM pg_attribute
WHERE attrelid='cifar10_predict'::regclass AND attnum>0;

-- Tests with text class values:
-- Modify input data to have text classes, and mini-batch it.
DROP TABLE IF EXISTS cifar_10_sample_text_batched;
-- Create a new table using the text based column for dep var.
CREATE TABLE cifar_10_sample_text_batched AS
    SELECT buffer_id, independent_var, dependent_var_text_with_null AS dependent_var
    FROM cifar_10_sample_batched;
-- Insert a new row with NULL as the dependent var (one-hot encoded)
INSERT INTO cifar_10_sample_text_batched(buffer_id, independent_var, dependent_var)
    SELECT 2, independent_var, ARRAY[[0,1,0,0,0]]
    FROM cifar_10_sample_batched
    WHERE cifar_10_sample_batched.buffer_id=0;
-- Create the necessary summary table for the batched input.
DROP TABLE IF EXISTS cifar_10_sample_text_batched_summary;
CREATE TABLE cifar_10_sample_text_batched_summary(
    source_table text,
    output_table text,
    dependent_varname text,
    independent_varname text,
    dependent_vartype text,
    class_values text[],
    buffer_size integer,
    normalizing_const numeric);
INSERT INTO cifar_10_sample_text_batched_summary values (
    'cifar_10_sample',
    'cifar_10_sample_text_batched',
    'y_text',
    'x',
    'text',
    ARRAY[NULL,'cat','dog',NULL,NULL],
    1,
    255.0);

-- Change model_arch to reflect 5 num_classes
DROP TABLE IF EXISTS model_arch;
SELECT load_keras_model('model_arch',
  $${
  "class_name": "Sequential",
  "keras_version": "2.1.6",
  "config": [{
    "class_name": "Conv2D", "config": {"kernel_initializer": {"class_name": "VarianceScaling", "config": {"distribution": "uniform", "scale": 1.0, "seed": null, "mode": "fan_avg"}},
    "name": "conv2d_1",
    "kernel_constraint": null, "bias_regularizer": null, "bias_constraint": null,
    "dtype": "float32", "activation": "relu", "trainable": true,
    "data_format": "channels_last", "filters": 32, "padding": "valid",
    "strides": [1, 1], "dilation_rate": [1, 1], "kernel_regularizer": null,
    "bias_initializer": {"class_name": "Zeros", "config": {}},
    "batch_input_shape": [null, 32, 32, 3], "use_bias": true,
    "activity_regularizer": null, "kernel_size": [3, 3]}},
    {"class_name": "MaxPooling2D", "config": {"name": "max_pooling2d_1", "trainable": true, "data_format": "channels_last", "pool_size": [2, 2], "padding": "valid", "strides": [2, 2]}},
    {"class_name": "Dropout", "config": {"rate": 0.25, "noise_shape": null, "trainable": true, "seed": null, "name": "dropout_1"}},
    {"class_name": "Flatten", "config": {"trainable": true, "name": "flatten_1", "data_format": "channels_last"}},
    {"class_name": "Dense", "config": {"kernel_initializer": {"class_name": "VarianceScaling", "config": {"distribution": "uniform", "scale": 1.0, "seed": null, "mode": "fan_avg"}}, "name": "dense_1", "kernel_constraint": null, "bias_regularizer": null, "bias_constraint": null, "activation": "softmax", "trainable": true, "kernel_regularizer": null, "bias_initializer":
    {"class_name": "Zeros", "config": {}}, "units": 5, "use_bias": true, "activity_regularizer": null}
    }], "backend": "tensorflow"}$$);

DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_text_batched',
    'keras_saved_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    3);
-- Assert fit has correct class_values
SELECT assert(
    dependent_vartype = 'text' AND
    class_values = '{NULL,cat,dog,NULL,NULL}',
    'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_saved_out_summary) summary;

-- Predict with pred_type=prob
DROP TABLE IF EXISTS cifar_10_sample_text;
CREATE TABLE cifar_10_sample_text AS
    SELECT id, x, y_text
    FROM cifar_10_sample;
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_text',
    'id',
    'x',
    'cifar10_predict',
    'prob',
    0);

-- Validate the output datatype of newly created prediction columns
-- for prediction type = 'prob' and class_values 'TEXT' with NULL as a valid
-- class_values
SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'column prob_cat should be double precision type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass AND attname = 'prob_cat';

SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'column prob_dog should be double precision type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass AND attname = 'prob_dog';

SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'column prob_NULL should be double precision type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass AND attname = 'prob_NULL';

-- Must have exactly 4 cols (3 for class_values and 1 for id)
SELECT assert(COUNT(*)=4, 'Predict out table must have exactly four cols.')
FROM pg_attribute
WHERE attrelid='cifar10_predict'::regclass AND attnum>0;

-- Predict with pred_type=response
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_text',
    'id',
    'x',
    'cifar10_predict',
    'response',
    0);

-- Validate the output datatype of newly created prediction columns
-- for prediction type = 'response' and class_values 'TEXT' with NULL
-- as a valid class_values
SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'TEXT', 'prediction column should be TEXT type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass
      AND attname = 'estimated_y';

-- Tests where the assumption is user has one-hot encoded, so class_values
-- in input summary table will be NULL.
UPDATE keras_saved_out_summary SET class_values=NULL;

-- Predict with pred_type=prob
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_text',
    'id',
    'x',
    'cifar10_predict',
    'prob',
    0);

-- Validate the output datatype of newly created prediction column
-- for prediction type = 'response' and class_value = NULL
-- Returns: Array of probabilities for user's one-hot encoded data
SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION[]', 'column prob should be double precision[] type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass AND attname = 'prob';

-- Predict with pred_type=response
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_text',
    'id',
    'x',
    'cifar10_predict',
    'response',
    0);

-- Validate the output datatype of newly created prediction column
-- for prediction type = 'response' and class_value = NULL
-- Returns: Index of class value in user's one-hot encoded data with
-- highest probability
SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'prediction column should be double precision type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass
      AND attname = 'estimated_y';

-- Test predict with INTEGER class_values
-- with NULL as a valid class value
INSERT INTO cifar_10_sample(id, x, y, imgpath)
SELECT 3, x, NULL, '0/img3.jpg' FROM cifar_10_sample
WHERE y = 1;
INSERT INTO cifar_10_sample(id, x, y, imgpath)
SELECT 4, x, 4, '0/img4.jpg' FROM cifar_10_sample
WHERE y = 0;
INSERT INTO cifar_10_sample(id, x, y, imgpath)
SELECT 5, x, 5, '0/img5.jpg' FROM cifar_10_sample
WHERE y = 1;

DROP TABLE IF EXISTS cifar_10_sample_int_batched;
DROP TABLE IF EXISTS cifar_10_sample_int_batched_summary;
SELECT training_preprocessor_dl('cifar_10_sample','cifar_10_sample_int_batched','y','x', 2, 255, 5);

DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_int_batched',
    'keras_saved_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    3);

-- Assert fit has correct class_values
SELECT assert(
    dependent_vartype = 'smallint' AND
    class_values = '{NULL,0,1,4,5}',
    'Keras model output Summary Validation failed. Actual:' || __to_char(summary))
FROM (SELECT * FROM keras_saved_out_summary) summary;

-- Predict with pred_type=prob
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample',
    'id',
    'x',
    'cifar10_predict',
    'prob',
    0);

-- Validate the output datatype of newly created prediction column
-- for prediction type = 'prob' and class_values 'INT' with NULL
-- as a valid class_values
SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'DOUBLE PRECISION', 'column prob_NULL should be double precision type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass AND attname = 'prob_NULL';

-- Must have exactly 6 cols (5 for class_values and 1 for id)
SELECT assert(COUNT(*)=6, 'Predict out table must have exactly four cols.')
FROM pg_attribute
WHERE attrelid='cifar10_predict'::regclass AND attnum>0;

-- Predict with pred_type=response
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample',
    'id',
    'x',
    'cifar10_predict',
    'response',
    0);

-- Validate the output datatype of newly created prediction column
-- for prediction type = 'response' and class_values 'TEXT' with NULL
-- as a valid class_values
-- Returns: class_value with highest probability
SELECT assert(UPPER(atttypid::regtype::TEXT) =
    'SMALLINT', 'prediction column should be smallint type')
FROM pg_attribute
WHERE attrelid = 'cifar10_predict'::regclass AND attname = 'estimated_y';

-- Test case with a different input shape (3, 32, 32) instead of (32, 32, 3).
-- Create a new table with image shape 3, 32, 32
drop table if exists cifar_10_sample_test_shape;
create table cifar_10_sample_test_shape(id INTEGER, y SMALLINT, x  REAL[] );
copy cifar_10_sample_test_shape from stdin delimiter '|';
1|0|{{{248,248,250,245,245,246,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245},{247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245},{245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247},{248,248,250,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245},{247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245},{245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247,245,245,247},{249,249,251,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246},{248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246},{246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248},{249,249,251,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246},{248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246},{246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248},{249,249,251,245,245,247,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,249,246,246,249,246,246},{249,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248,246},{246,248,246,246,248,246,246,248,246,246,248,246,246,249,246,246,249,246,246,248,246,246,248,246,246,248,246,246,248,246,246,248},{249,249,251,245,245,247,246,246,248,247,246,249,247,246,248,246,246,247,245,246,248,246,246,251,247,245,252,247,245,251,247,245},{250,247,245,250,248,245,249,247,245,248,246,243,247,246,243,247,245,244,248,244,244,248,246,245,248,246,246,248,246,246,248,246},{246,248,246,246,248,246,246,248,246,246,248,246,245,249,246,246,249,245,246,249,245,246,249,246,246,247,246,246,246,246,246,247},{249,249,251,245,245,247,246,246,248,247,246,248,247,246,248,247,246,249,246,246,250,245,246,250,245,246,248,245,246,247,246,246},{247,246,246,247,247,246,247,246,246,247,245,244,245,245,244,245,244,244,247,244,243,247,245,245,248,246,246,248,246,246,248,246},{246,248,246,246,248,246,246,248,246,246,246,246,246,244,246,247,244,246,247,245,245,246,247,246,245,250,246,246,248,246,246,248},{249,249,251,245,245,247,246,246,248,244,245,245,242,243,246,244,243,248,246,244,247,247,247,246,248,250,247,247,249,247,246,247},{248,245,246,248,245,246,251,245,246,251,243,244,249,243,244,248,244,244,244,244,244,244,245,245,247,246,246,248,246,246,248,246},{246,248,246,246,248,246,246,248,246,246,247,246,247,245,246,246,244,247,245,243,249,247,246,246,245,249,246,245,251,246,245,250},{249,249,251,245,245,247,245,245,247,245,248,249,245,248,251,245,245,247,247,246,237,245,243,229,235,233,226,238,236,233,243,240},{241,248,245,249,246,245,253,246,245,253,245,244,252,245,245,251,245,246,243,245,246,241,246,246,246,246,245,249,246,246,249,246},{246,248,246,246,248,246,246,248,245,245,250,244,244,251,248,245,249,247,242,239,240,235,227,242,243,235,245,245,247,246,245,251},{249,249,251,244,244,246,233,233,235,187,192,193,161,166,169,160,161,157,208,207,179,230,227,188,215,210,179,215,209,184,231,224},{205,240,233,220,239,236,226,241,238,229,242,238,230,241,238,229,238,239,229,244,245,238,246,246,245,246,246,250,246,246,249,246},{246,248,247,246,248,247,246,248,245,245,250,246,247,252,240,238,232,222,216,193,202,198,164,206,209,180,241,242,235,246,245,250},{248,248,250,245,245,247,231,231,233,127,131,133,39,44,46,26,27,17,109,109,70,169,167,108,180,174,116,191,183,131,203,194},{147,184,175,133,145,139,102,149,144,106,150,146,108,151,148,114,186,187,169,240,241,234,245,246,245,246,245,250,246,246,251,245}},{{246,250,245,246,249,245,246,249,246,248,248,229,231,219,196,198,164,196,195,140,185,183,121,186,191,148,240,242,229,247,246,250},{249,249,251,244,244,246,244,244,246,233,232,234,174,173,172,114,113,100,112,112,85,112,110,70,112,108,59,125,119,67,151,143},{86,149,139,83,124,113,60,111,103,42,115,111,51,151,148,103,203,204,184,241,243,237,246,247,249,247,247,251,245,247,252,246},{246,251,248,247,249,240,243,241,216,219,204,196,197,157,195,200,138,197,199,132,178,178,118,208,210,176,246,245,244,245,245,250},{249,249,251,244,244,246,244,244,246,246,244,246,249,247,245,239,238,230,222,221,209,199,197,178,124,120,91,82,77,36,132,126},{71,171,164,102,171,162,100,143,137,68,147,143,80,194,191,145,201,204,180,211,214,204,227,229,226,236,238,235,245,243,239,249},{242,236,235,224,212,209,198,177,194,183,153,187,176,134,165,158,106,141,137,80,109,107,52,187,187,159,248,246,251,245,245,249},{248,248,250,244,244,246,244,244,246,245,244,244,242,242,241,243,243,242,250,249,249,253,251,251,189,185,176,91,87,61,96,92},{46,155,152,93,153,150,88,149,147,82,153,151,92,177,175,130,197,200,172,199,203,187,186,190,179,166,169,156,153,152,138,143},{133,117,115,96,73,123,102,69,145,124,86,132,108,74,90,68,36,80,68,26,100,98,47,213,212,190,249,247,251,244,245,248},{247,247,249,244,244,246,244,244,246,244,244,245,244,244,245,244,244,247,242,242,248,243,242,249,244,241,245,179,176,165,104,101},{73,82,80,40,89,90,43,101,102,53,108,107,60,120,118,78,130,134,105,144,149,131,161,165,150,154,159,140,118,124,106,87},{86,70,74,64,42,69,58,29,74,60,27,81,58,27,84,60,28,100,86,48,156,155,114,223,222,207,247,245,250,245,246,246},{247,247,249,244,243,246,244,244,246,243,244,247,242,245,247,242,245,247,242,245,247,243,245,247,244,244,248,241,240,240,219,216},{209,140,138,125,85,88,68,79,81,56,86,85,54,83,81,46,62,65,40,55,60,44,77,81,66,91,96,75,106,113,89,109},{112,90,104,100,78,88,87,63,72,72,45,70,62,26,94,79,29,142,132,87,149,149,121,205,203,195,246,244,250,244,245,244},{246,247,248,243,243,244,244,244,245,242,244,247,241,245,247,241,245,245,241,245,243,241,245,243,242,244,245,244,244,248,252,249},{254,212,210,213,185,186,184,160,161,153,159,159,140,107,107,79,61,64,42,49,53,38,41,45,31,38,42,25,38,41,18,58},{56,29,76,72,43,83,83,52,82,86,58,74,75,37,139,133,71,173,169,114,129,131,104,202,201,197,247,245,250,242,244,243},{245,247,245,242,243,242,242,244,243,242,244,245,242,243,245,242,243,245,242,244,244,242,243,244,242,243,245,242,243,246,242,242},{246,175,175,177,159,160,154,142,143,133,133,135,120,105,108,89,89,96,75,85,93,75,72,78,64,56,63,51,42,45,34,47},{47,26,55,55,18,67,65,21,79,74,38,74,68,30,117,113,58,176,174,122,138,137,108,177,178,176,247,247,250,243,244,245},{245,247,246,242,243,242,242,244,243,242,243,244,242,243,245,242,243,245,242,243,245,242,243,245,242,243,245,242,243,245,243,244},{245,211,213,212,210,215,207,178,181,171,133,134,122,108,107,94,89,97,80,76,88,69,77,89,69,80,91,72,63,69,51,68},{70,46,72,72,40,99,96,65,101,96,59,62,57,8,69,66,21,132,127,103,203,198,196,228,229,231,243,244,246,242,243,245},{245,246,248,241,243,244,242,243,245,242,243,245,242,243,245,242,243,245,242,243,245,242,243,245,242,243,245,242,243,245,241,242},{244,245,248,248,243,252,246,245,249,242,239,237,230,218,212,205,194,193,184,133,135,122,60,62,43,76,80,54,82,85,57,79},{81,55,117,117,97,201,199,188,171,168,147,95,92,54,130,128,99,212,209,204,245,241,252,245,245,248,242,243,245,241,242,244},{244,245,249,241,242,246,241,242,246,241,242,245,242,243,245,241,242,244,241,242,244,241,242,244,241,242,244,241,242,244,241,242},{244,239,242,243,235,244,242,240,244,241,240,238,235,192,184,181,182,170,169,152,140,136,53,42,30,68,57,38,93,90,66,139},{141,122,214,213,207,244,244,245,228,226,225,210,207,200,225,223,215,244,244,240,242,243,243,242,243,245,243,244,246,243,244,246},{243,244,249,241,241,246,241,242,247,241,242,245,241,242,243,241,242,244,241,242,244,241,242,244,241,242,244,241,242,244,241,242}},{{244,241,242,245,241,242,246,242,243,245,243,242,242,221,219,217,214,205,205,196,185,183,100,90,83,121,112,100,188,184,171,234},{232,228,245,245,249,238,242,244,243,245,248,248,245,253,244,243,247,240,243,241,240,244,239,242,243,244,242,243,245,242,243,245},{243,244,250,240,241,247,240,242,247,240,241,246,240,241,245,240,242,245,241,242,245,241,242,245,241,242,245,241,242,245,241,242},{245,241,242,245,242,241,247,242,241,246,242,243,245,246,247,248,248,248,248,246,245,244,209,209,207,225,225,221,247,246,244,244},{242,247,240,240,248,239,243,246,239,242,243,241,240,245,241,241,247,240,243,247,239,243,245,241,242,245,241,242,245,241,242,245},{241,244,251,238,241,247,238,241,248,238,241,248,239,241,248,239,241,248,239,242,248,239,241,247,240,241,246,240,241,246,241,242},{246,241,241,246,240,241,246,240,241,246,241,242,246,240,241,245,239,240,245,240,241,245,242,243,247,241,243,246,240,240,245,240},{240,246,241,241,247,240,241,246,240,242,246,241,242,246,241,242,247,241,242,247,241,242,247,241,242,247,241,242,247,241,242,247},{240,243,250,237,240,247,238,241,248,238,241,248,237,240,247,237,240,247,237,240,247,238,241,247,240,241,246,240,241,246,239,240},{245,239,240,245,240,241,246,240,241,246,239,240,245,239,241,246,240,241,246,240,241,247,239,240,245,240,241,246,241,242,247,240},{241,246,240,241,246,240,241,246,240,241,246,240,241,246,240,241,246,241,242,247,241,242,247,241,242,247,241,242,247,241,242,247},{239,242,249,237,240,247,238,240,247,237,240,247,236,239,246,236,239,246,236,239,246,237,240,246,238,241,246,237,241,245,237,240},{244,237,240,245,238,241,246,238,241,246,237,240,245,237,240,245,238,241,245,238,241,246,238,241,246,238,241,246,238,241,246,238},{241,246,238,241,246,238,241,246,238,241,246,238,241,245,238,241,246,239,242,247,239,242,247,239,242,247,239,242,247,239,242,247},{239,242,249,236,239,246,236,239,246,237,240,247,237,240,247,236,239,246,236,239,246,236,240,246,235,241,245,235,241,245,235,241},{245,235,241,245,235,241,245,235,241,245,235,241,245,235,241,245,235,241,245,235,241,245,235,241,245,234,241,244,235,241,245,235},{242,245,236,242,246,236,242,246,235,242,245,234,240,244,235,241,245,236,242,246,236,242,246,236,242,246,236,242,246,236,242,246},{239,242,249,236,239,245,236,239,246,236,239,246,236,239,246,236,239,246,236,239,246,235,240,245,233,241,244,233,241,244,233,241},{244,233,241,244,233,241,244,233,241,244,233,241,244,233,241,244,233,241,244,233,241,244,233,241,244,233,241,244,233,241,244,233},{241,244,234,242,245,235,243,246,234,242,245,233,241,244,234,242,245,235,243,246,235,243,246,235,243,246,235,243,246,235,243,246},{237,242,249,234,239,246,235,239,246,234,239,246,234,238,246,235,239,246,235,239,246,234,239,246,232,240,245,232,240,244,232,240},{244,232,240,244,232,240,244,232,240,244,232,240,244,232,240,244,232,240,244,232,240,245,233,240,245,233,241,245,233,240,245,232},{240,245,233,241,246,234,242,247,234,241,246,233,240,245,233,241,245,234,242,246,234,242,246,234,242,247,234,242,247,234,242,247},{235,242,250,232,238,246,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239},{247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,233,240,247,233,240,248,233,240,247,233},{240,247,233,240,248,233,240,248,233,240,247,232,239,247,232,239,247,232,239,247,232,239,247,233,240,248,233,240,248,233,240,248},{235,242,250,231,239,246,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239},{247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232},{239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,233,240,248},{235,242,250,232,238,246,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239},{247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,231,238,246,231,238,246,231},{238,246,231,238,246,231,238,246,232,239,247,232,239,247,232,239,247,232,239,247,232,239,247,231,238,246,232,239,246,232,239,247}}}
\.

DROP TABLE IF EXISTS cifar_10_sample_test_shape_batched;
DROP TABLE IF EXISTS cifar_10_sample_test_shape_batched_summary;
SELECT training_preprocessor_dl('cifar_10_sample_test_shape','cifar_10_sample_test_shape_batched','y','x', NULL, 255, 3);

-- Change model_arch to reflect channels_first
DROP TABLE IF EXISTS model_arch;
SELECT load_keras_model('model_arch',
  $${
  "class_name": "Sequential",
  "keras_version": "2.1.6",
  "config": [{
    "class_name": "Conv2D", "config": {"kernel_initializer": {"class_name": "VarianceScaling", "config": {"distribution": "uniform", "scale": 1.0, "seed": null, "mode": "fan_avg"}},
    "name": "conv2d_1",
    "kernel_constraint": null, "bias_regularizer": null, "bias_constraint": null,
    "dtype": "float32", "activation": "relu", "trainable": true,
    "data_format": "channels_first", "filters": 32, "padding": "valid",
    "strides": [1, 1], "dilation_rate": [1, 1], "kernel_regularizer": null,
    "bias_initializer": {"class_name": "Zeros", "config": {}},
    "batch_input_shape": [null, 3, 32, 32], "use_bias": true,
    "activity_regularizer": null, "kernel_size": [3, 3]}},
    {"class_name": "MaxPooling2D", "config": {"name": "max_pooling2d_1", "trainable": true, "data_format": "channels_first", "pool_size": [2, 2], "padding": "valid", "strides": [2, 2]}},
    {"class_name": "Dropout", "config": {"rate": 0.25, "noise_shape": null, "trainable": true, "seed": null, "name": "dropout_1"}},
    {"class_name": "Flatten", "config": {"trainable": true, "name": "flatten_1", "data_format": "channels_first"}},
    {"class_name": "Dense", "config": {"kernel_initializer": {"class_name": "VarianceScaling", "config": {"distribution": "uniform", "scale": 1.0, "seed": null, "mode": "fan_avg"}}, "name": "dense_1", "kernel_constraint": null, "bias_regularizer": null, "bias_constraint": null, "activation": "softmax", "trainable": true, "kernel_regularizer": null, "bias_initializer":
    {"class_name": "Zeros", "config": {}}, "units": 3, "use_bias": true, "activity_regularizer": null}
    }], "backend": "tensorflow"}$$);

DROP TABLE IF EXISTS keras_saved_out, keras_saved_out_summary;
SELECT madlib_keras_fit(
    'cifar_10_sample_test_shape_batched',
    'keras_saved_out',
    'model_arch',
    1,
    $$ optimizer=SGD(lr=0.01, decay=1e-6, nesterov=True), loss='categorical_crossentropy', metrics=['accuracy']$$::text,
    $$ batch_size=2, epochs=1, verbose=0 $$::text,
    3);

-- Predict with correctly shaped data, must go thru.
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_test_shape',
    'id',
    'x',
    'cifar10_predict',
    'prob',
    0);

-- Prediction with incorrectly shaped data must error out.
DROP TABLE IF EXISTS cifar10_predict;
SELECT assert(trap_error($TRAP$madlib_keras_predict(
        'keras_saved_out',
        'cifar_10_sample',
        'id',
        'x',
        'cifar10_predict',
        'prob',
        0);$TRAP$) = 1,
    'Input shape is (32, 32, 3) but model was trained with (3, 32, 32). Should have failed.');

-- Test model_arch is retrieved from model data table and not model architecture
DROP TABLE IF EXISTS model_arch;
DROP TABLE IF EXISTS cifar10_predict;
SELECT madlib_keras_predict(
    'keras_saved_out',
    'cifar_10_sample_test_shape',
    'id',
    'x',
    'cifar10_predict',
    'prob',
    0);

-------------------- TRANSFER LEARNING and WARM START -----------------

DROP TABLE IF EXISTS iris_data;
CREATE TABLE iris_data(
    id serial,
    attributes numeric[],
    class_text varchar
);
INSERT INTO iris_data(id, attributes, class_text) VALUES
(1,ARRAY[5.1,3.5,1.4,0.2],'Iris-setosa'),
(2,ARRAY[4.9,3.0,1.4,0.2],'Iris-setosa'),
(3,ARRAY[4.7,3.2,1.3,0.2],'Iris-setosa'),
(4,ARRAY[4.6,3.1,1.5,0.2],'Iris-setosa'),
(5,ARRAY[5.0,3.6,1.4,0.2],'Iris-setosa'),
(6,ARRAY[5.4,3.9,1.7,0.4],'Iris-setosa'),
(7,ARRAY[4.6,3.4,1.4,0.3],'Iris-setosa'),
(8,ARRAY[5.0,3.4,1.5,0.2],'Iris-setosa'),
(9,ARRAY[4.4,2.9,1.4,0.2],'Iris-setosa'),
(10,ARRAY[4.9,3.1,1.5,0.1],'Iris-setosa'),
(11,ARRAY[5.4,3.7,1.5,0.2],'Iris-setosa'),
(12,ARRAY[4.8,3.4,1.6,0.2],'Iris-setosa'),
(13,ARRAY[4.8,3.0,1.4,0.1],'Iris-setosa'),
(14,ARRAY[4.3,3.0,1.1,0.1],'Iris-setosa'),
(15,ARRAY[5.8,4.0,1.2,0.2],'Iris-setosa'),
(16,ARRAY[5.7,4.4,1.5,0.4],'Iris-setosa'),
(17,ARRAY[5.4,3.9,1.3,0.4],'Iris-setosa'),
(18,ARRAY[5.1,3.5,1.4,0.3],'Iris-setosa'),
(19,ARRAY[5.7,3.8,1.7,0.3],'Iris-setosa'),
(20,ARRAY[5.1,3.8,1.5,0.3],'Iris-setosa'),
(21,ARRAY[5.4,3.4,1.7,0.2],'Iris-setosa'),
(22,ARRAY[5.1,3.7,1.5,0.4],'Iris-setosa'),
(23,ARRAY[4.6,3.6,1.0,0.2],'Iris-setosa'),
(24,ARRAY[5.1,3.3,1.7,0.5],'Iris-setosa'),
(25,ARRAY[4.8,3.4,1.9,0.2],'Iris-setosa'),
(26,ARRAY[5.0,3.0,1.6,0.2],'Iris-setosa'),
(27,ARRAY[5.0,3.4,1.6,0.4],'Iris-setosa'),
(28,ARRAY[5.2,3.5,1.5,0.2],'Iris-setosa'),
(29,ARRAY[5.2,3.4,1.4,0.2],'Iris-setosa'),
(30,ARRAY[4.7,3.2,1.6,0.2],'Iris-setosa'),
(31,ARRAY[4.8,3.1,1.6,0.2],'Iris-setosa'),
(32,ARRAY[5.4,3.4,1.5,0.4],'Iris-setosa'),
(33,ARRAY[5.2,4.1,1.5,0.1],'Iris-setosa'),
(34,ARRAY[5.5,4.2,1.4,0.2],'Iris-setosa'),
(35,ARRAY[4.9,3.1,1.5,0.1],'Iris-setosa'),
(36,ARRAY[5.0,3.2,1.2,0.2],'Iris-setosa'),
(37,ARRAY[5.5,3.5,1.3,0.2],'Iris-setosa'),
(38,ARRAY[4.9,3.1,1.5,0.1],'Iris-setosa'),
(39,ARRAY[4.4,3.0,1.3,0.2],'Iris-setosa'),
(40,ARRAY[5.1,3.4,1.5,0.2],'Iris-setosa'),
(41,ARRAY[5.0,3.5,1.3,0.3],'Iris-setosa'),
(42,ARRAY[4.5,2.3,1.3,0.3],'Iris-setosa'),
(43,ARRAY[4.4,3.2,1.3,0.2],'Iris-setosa'),
(44,ARRAY[5.0,3.5,1.6,0.6],'Iris-setosa'),
(45,ARRAY[5.1,3.8,1.9,0.4],'Iris-setosa'),
(46,ARRAY[4.8,3.0,1.4,0.3],'Iris-setosa'),
(47,ARRAY[5.1,3.8,1.6,0.2],'Iris-setosa'),
(48,ARRAY[4.6,3.2,1.4,0.2],'Iris-setosa'),
(49,ARRAY[5.3,3.7,1.5,0.2],'Iris-setosa'),
(50,ARRAY[5.0,3.3,1.4,0.2],'Iris-setosa'),
(51,ARRAY[7.0,3.2,4.7,1.4],'Iris-versicolor'),
(52,ARRAY[6.4,3.2,4.5,1.5],'Iris-versicolor'),
(53,ARRAY[6.9,3.1,4.9,1.5],'Iris-versicolor'),
(54,ARRAY[5.5,2.3,4.0,1.3],'Iris-versicolor'),
(55,ARRAY[6.5,2.8,4.6,1.5],'Iris-versicolor'),
(56,ARRAY[5.7,2.8,4.5,1.3],'Iris-versicolor'),
(57,ARRAY[6.3,3.3,4.7,1.6],'Iris-versicolor'),
(58,ARRAY[4.9,2.4,3.3,1.0],'Iris-versicolor'),
(59,ARRAY[6.6,2.9,4.6,1.3],'Iris-versicolor'),
(60,ARRAY[5.2,2.7,3.9,1.4],'Iris-versicolor'),
(61,ARRAY[5.0,2.0,3.5,1.0],'Iris-versicolor'),
(62,ARRAY[5.9,3.0,4.2,1.5],'Iris-versicolor'),
(63,ARRAY[6.0,2.2,4.0,1.0],'Iris-versicolor'),
(64,ARRAY[6.1,2.9,4.7,1.4],'Iris-versicolor'),
(65,ARRAY[5.6,2.9,3.6,1.3],'Iris-versicolor'),
(66,ARRAY[6.7,3.1,4.4,1.4],'Iris-versicolor'),
(67,ARRAY[5.6,3.0,4.5,1.5],'Iris-versicolor'),
(68,ARRAY[5.8,2.7,4.1,1.0],'Iris-versicolor'),
(69,ARRAY[6.2,2.2,4.5,1.5],'Iris-versicolor'),
(70,ARRAY[5.6,2.5,3.9,1.1],'Iris-versicolor'),
(71,ARRAY[5.9,3.2,4.8,1.8],'Iris-versicolor'),
(72,ARRAY[6.1,2.8,4.0,1.3],'Iris-versicolor'),
(73,ARRAY[6.3,2.5,4.9,1.5],'Iris-versicolor'),
(74,ARRAY[6.1,2.8,4.7,1.2],'Iris-versicolor'),
(75,ARRAY[6.4,2.9,4.3,1.3],'Iris-versicolor'),
(76,ARRAY[6.6,3.0,4.4,1.4],'Iris-versicolor'),
(77,ARRAY[6.8,2.8,4.8,1.4],'Iris-versicolor'),
(78,ARRAY[6.7,3.0,5.0,1.7],'Iris-versicolor'),
(79,ARRAY[6.0,2.9,4.5,1.5],'Iris-versicolor'),
(80,ARRAY[5.7,2.6,3.5,1.0],'Iris-versicolor'),
(81,ARRAY[5.5,2.4,3.8,1.1],'Iris-versicolor'),
(82,ARRAY[5.5,2.4,3.7,1.0],'Iris-versicolor'),
(83,ARRAY[5.8,2.7,3.9,1.2],'Iris-versicolor'),
(84,ARRAY[6.0,2.7,5.1,1.6],'Iris-versicolor'),
(85,ARRAY[5.4,3.0,4.5,1.5],'Iris-versicolor'),
(86,ARRAY[6.0,3.4,4.5,1.6],'Iris-versicolor'),
(87,ARRAY[6.7,3.1,4.7,1.5],'Iris-versicolor'),
(88,ARRAY[6.3,2.3,4.4,1.3],'Iris-versicolor'),
(89,ARRAY[5.6,3.0,4.1,1.3],'Iris-versicolor'),
(90,ARRAY[5.5,2.5,4.0,1.3],'Iris-versicolor'),
(91,ARRAY[5.5,2.6,4.4,1.2],'Iris-versicolor'),
(92,ARRAY[6.1,3.0,4.6,1.4],'Iris-versicolor'),
(93,ARRAY[5.8,2.6,4.0,1.2],'Iris-versicolor'),
(94,ARRAY[5.0,2.3,3.3,1.0],'Iris-versicolor'),
(95,ARRAY[5.6,2.7,4.2,1.3],'Iris-versicolor'),
(96,ARRAY[5.7,3.0,4.2,1.2],'Iris-versicolor'),
(97,ARRAY[5.7,2.9,4.2,1.3],'Iris-versicolor'),
(98,ARRAY[6.2,2.9,4.3,1.3],'Iris-versicolor'),
(99,ARRAY[5.1,2.5,3.0,1.1],'Iris-versicolor'),
(100,ARRAY[5.7,2.8,4.1,1.3],'Iris-versicolor'),
(101,ARRAY[6.3,3.3,6.0,2.5],'Iris-virginica'),
(102,ARRAY[5.8,2.7,5.1,1.9],'Iris-virginica'),
(103,ARRAY[7.1,3.0,5.9,2.1],'Iris-virginica'),
(104,ARRAY[6.3,2.9,5.6,1.8],'Iris-virginica'),
(105,ARRAY[6.5,3.0,5.8,2.2],'Iris-virginica'),
(106,ARRAY[7.6,3.0,6.6,2.1],'Iris-virginica'),
(107,ARRAY[4.9,2.5,4.5,1.7],'Iris-virginica'),
(108,ARRAY[7.3,2.9,6.3,1.8],'Iris-virginica'),
(109,ARRAY[6.7,2.5,5.8,1.8],'Iris-virginica'),
(110,ARRAY[7.2,3.6,6.1,2.5],'Iris-virginica'),
(111,ARRAY[6.5,3.2,5.1,2.0],'Iris-virginica'),
(112,ARRAY[6.4,2.7,5.3,1.9],'Iris-virginica'),
(113,ARRAY[6.8,3.0,5.5,2.1],'Iris-virginica'),
(114,ARRAY[5.7,2.5,5.0,2.0],'Iris-virginica'),
(115,ARRAY[5.8,2.8,5.1,2.4],'Iris-virginica'),
(116,ARRAY[6.4,3.2,5.3,2.3],'Iris-virginica'),
(117,ARRAY[6.5,3.0,5.5,1.8],'Iris-virginica'),
(118,ARRAY[7.7,3.8,6.7,2.2],'Iris-virginica'),
(119,ARRAY[7.7,2.6,6.9,2.3],'Iris-virginica'),
(120,ARRAY[6.0,2.2,5.0,1.5],'Iris-virginica'),
(121,ARRAY[6.9,3.2,5.7,2.3],'Iris-virginica'),
(122,ARRAY[5.6,2.8,4.9,2.0],'Iris-virginica'),
(123,ARRAY[7.7,2.8,6.7,2.0],'Iris-virginica'),
(124,ARRAY[6.3,2.7,4.9,1.8],'Iris-virginica'),
(125,ARRAY[6.7,3.3,5.7,2.1],'Iris-virginica'),
(126,ARRAY[7.2,3.2,6.0,1.8],'Iris-virginica'),
(127,ARRAY[6.2,2.8,4.8,1.8],'Iris-virginica'),
(128,ARRAY[6.1,3.0,4.9,1.8],'Iris-virginica'),
(129,ARRAY[6.4,2.8,5.6,2.1],'Iris-virginica'),
(130,ARRAY[7.2,3.0,5.8,1.6],'Iris-virginica'),
(131,ARRAY[7.4,2.8,6.1,1.9],'Iris-virginica'),
(132,ARRAY[7.9,3.8,6.4,2.0],'Iris-virginica'),
(133,ARRAY[6.4,2.8,5.6,2.2],'Iris-virginica'),
(134,ARRAY[6.3,2.8,5.1,1.5],'Iris-virginica'),
(135,ARRAY[6.1,2.6,5.6,1.4],'Iris-virginica'),
(136,ARRAY[7.7,3.0,6.1,2.3],'Iris-virginica'),
(137,ARRAY[6.3,3.4,5.6,2.4],'Iris-virginica'),
(138,ARRAY[6.4,3.1,5.5,1.8],'Iris-virginica'),
(139,ARRAY[6.0,3.0,4.8,1.8],'Iris-virginica'),
(140,ARRAY[6.9,3.1,5.4,2.1],'Iris-virginica'),
(141,ARRAY[6.7,3.1,5.6,2.4],'Iris-virginica'),
(142,ARRAY[6.9,3.1,5.1,2.3],'Iris-virginica'),
(143,ARRAY[5.8,2.7,5.1,1.9],'Iris-virginica'),
(144,ARRAY[6.8,3.2,5.9,2.3],'Iris-virginica'),
(145,ARRAY[6.7,3.3,5.7,2.5],'Iris-virginica'),
(146,ARRAY[6.7,3.0,5.2,2.3],'Iris-virginica'),
(147,ARRAY[6.3,2.5,5.0,1.9],'Iris-virginica'),
(148,ARRAY[6.5,3.0,5.2,2.0],'Iris-virginica'),
(149,ARRAY[6.2,3.4,5.4,2.3],'Iris-virginica'),
(150,ARRAY[5.9,3.0,5.1,1.8],'Iris-virginica');

DROP TABLE IF EXISTS iris_data_packed, iris_data_packed_summary;
SELECT training_preprocessor_dl('iris_data',         -- Source table
                                'iris_data_packed',  -- Output table
                                'class_text',        -- Dependent variable
                                'attributes'         -- Independent variable
                                );

DROP TABLE IF EXISTS iris_model_arch;
-- NOTE: The seed is set to 0 for every layer.
SELECT load_keras_model('iris_model_arch',  -- Output table,
$$
{
"class_name": "Sequential",
"keras_version": "2.1.6",
"config":
    [{"class_name": "Dense", "config": {"kernel_initializer": {"class_name": "VarianceScaling",
    "config": {"distribution": "uniform", "scale": 1.0, "seed": 0, "mode": "fan_avg"}},
    "name": "dense_1", "kernel_constraint": null, "bias_regularizer": null,
    "bias_constraint": null, "dtype": "float32", "activation": "relu", "trainable": true,
    "kernel_regularizer": null, "bias_initializer": {"class_name": "Zeros",
    "config": {}}, "units": 10, "batch_input_shape": [null, 4], "use_bias": true,
    "activity_regularizer": null}}, {"class_name": "Dense",
    "config": {"kernel_initializer": {"class_name": "VarianceScaling",
    "config": {"distribution": "uniform", "scale": 1.0, "seed": 0, "mode": "fan_avg"}},
    "name": "dense_2", "kernel_constraint": null, "bias_regularizer": null,
    "bias_constraint": null, "activation": "relu", "trainable": true, "kernel_regularizer": null,
    "bias_initializer": {"class_name": "Zeros", "config": {}}, "units": 10, "use_bias": true,
    "activity_regularizer": null}}, {"class_name": "Dense", "config": {"kernel_initializer":
    {"class_name": "VarianceScaling", "config": {"distribution": "uniform", "scale": 1.0,
    "seed": 0, "mode": "fan_avg"}}, "name": "dense_3", "kernel_constraint": null,
    "bias_regularizer": null, "bias_constraint": null, "activation": "softmax",
    "trainable": true, "kernel_regularizer": null, "bias_initializer": {"class_name": "Zeros",
    "config": {}}, "units": 3, "use_bias": true, "activity_regularizer": null}}],
    "backend": "tensorflow"}
$$
);

DROP TABLE IF EXISTS iris_model, iris_model_summary;
SELECT madlib_keras_fit('iris_data_packed',   -- source table
                        'iris_model',          -- model output table
                        'iris_model_arch',  -- model arch table
                         1,                    -- model arch id
                         $$ loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] $$,  -- compile_params
                         $$ batch_size=5, epochs=3 $$,  -- fit_params
                         5,                    -- num_iterations
                         NULL, NULL,
                         1 -- metrics_compute_frequency
                        );

-- Test that our code is indeed learning something and not broken. The loss
-- from the first iteration should be less than the 5th, while the accuracy
-- must be greater.
SELECT assert(
  array_upper(training_loss, 1) = 5 AND
  array_upper(training_metrics, 1) = 5,
  'metrics compute frequency must be 1.')
FROM iris_model_summary;

SELECT assert(
  training_loss[5]-training_loss[1] < 0 AND
  training_metrics[5]-training_metrics[1] > 0,
    'The loss and accuracy should have improved with more iterations.'
)
FROM iris_model_summary;

-- Make a copy of the loss and metrics array, to compare it with runs after
-- warm start and transfer learning.
DROP TABLE IF EXISTS iris_model_first_run;
CREATE TABLE iris_model_first_run AS
SELECT training_loss_final, training_metrics_final
FROM iris_model_summary;

-- Duplicate the architecture, but note that trainable is set to FALSE.
-- This is to ensure we don't learn anything new, that would help us
-- deterministically assert the accuracy and loss after transfer learning
-- and warm start.
SELECT load_keras_model('iris_model_arch',  -- Output table,
$$
{
"class_name": "Sequential",
"keras_version": "2.1.6",
"config":
    [{"class_name": "Dense", "config": {"kernel_initializer": {"class_name": "VarianceScaling",
    "config": {"distribution": "uniform", "scale": 1.0, "seed": 0, "mode": "fan_avg"}},
    "name": "dense_1", "kernel_constraint": null, "bias_regularizer": null,
    "bias_constraint": null, "dtype": "float32", "activation": "relu",
    "trainable": false,
    "kernel_regularizer": null, "bias_initializer": {"class_name": "Zeros",
    "config": {}}, "units": 10, "batch_input_shape": [null, 4], "use_bias": true,
    "activity_regularizer": null}}, {"class_name": "Dense",
    "config": {"kernel_initializer": {"class_name": "VarianceScaling",
    "config": {"distribution": "uniform", "scale": 1.0, "seed": 0, "mode": "fan_avg"}},
    "name": "dense_2", "kernel_constraint": null, "bias_regularizer": null,
    "bias_constraint": null, "activation": "relu",
    "trainable": false,
    "kernel_regularizer": null, "bias_initializer": {"class_name": "Zeros",
    "config": {}}, "units": 10, "use_bias": true, "activity_regularizer": null}},
    {"class_name": "Dense", "config": {"kernel_initializer":
    {"class_name": "VarianceScaling", "config": {"distribution": "uniform", "scale": 1.0,
    "seed": 0, "mode": "fan_avg"}}, "name": "dense_3", "kernel_constraint": null,
    "bias_regularizer": null, "bias_constraint": null, "activation": "softmax",
    "trainable": false,
    "kernel_regularizer": null, "bias_initializer": {"class_name": "Zeros",
    "config": {}}, "units": 3, "use_bias": true, "activity_regularizer": null}}],
    "backend": "tensorflow"}
$$
);
-- Copy weights that were learnt from the previous run, for transfer
-- learning. Copy it now, because using warm_start will overwrite it.
UPDATE iris_model_arch set model_weights = (select model_data from iris_model)  WHERE model_id = 2;

-- Warm start test
SELECT madlib_keras_fit('iris_data_packed',   -- source table
                       'iris_model',          -- model output table
                       'iris_model_arch',  -- model arch table
                        2,                    -- model arch id
                        $$ loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] $$,  -- compile_params
                        $$ batch_size=5, epochs=3 $$,  -- fit_params
                        2,                    -- num_iterations,
                        NULL, NULL, 1,
                        true -- warm start
                      );

SELECT assert(
  array_upper(training_loss, 1) = 2 AND
  array_upper(training_metrics, 1) = 2,
  'metrics compute frequency must be 1.')
FROM iris_model_summary;

SELECT assert(
  abs(first.training_loss_final-second.training_loss[1]) < 1e-6 AND
  abs(first.training_loss_final-second.training_loss[2]) < 1e-6 AND
  abs(first.training_metrics_final-second.training_metrics[1]) < 1e-10 AND
  abs(first.training_metrics_final-second.training_metrics[2]) < 1e-10,
  'warm start test failed because training loss and metrics don''t match the expected value from the previous run of keras fit.')
FROM iris_model_first_run AS first, iris_model_summary AS second;

-- Transfer learning test
DROP TABLE IF EXISTS iris_model_transfer, iris_model_transfer_summary;
SELECT madlib_keras_fit('iris_data_packed',   -- source table
                       'iris_model_transfer',          -- model output table
                       'iris_model_arch',  -- model arch table
                        2,                    -- model arch id
                        $$ loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] $$,  -- compile_params
                        $$ batch_size=5, epochs=3 $$,  -- fit_params
                        2,
                        NULL, NULL, 1
                      );

SELECT assert(
  array_upper(training_loss, 1) = 2 AND
  array_upper(training_metrics, 1) = 2,
  'metrics compute frequency must be 1.')
FROM iris_model_transfer_summary;

SELECT assert(
  abs(first.training_loss_final-second.training_loss[1]) < 1e-6 AND
  abs(first.training_loss_final-second.training_loss[2]) < 1e-6 AND
  abs(first.training_metrics_final-second.training_metrics[1]) < 1e-10 AND
  abs(first.training_metrics_final-second.training_metrics[2]) < 1e-10,
  'Transfer learning test failed because training loss and metrics don''t match the expected value.')
FROM iris_model_first_run AS first, iris_model_transfer_summary AS second;
