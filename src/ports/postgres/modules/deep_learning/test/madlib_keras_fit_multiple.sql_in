m4_include(`SQLCommon.m4')

\i m4_regexp(MODULE_PATHNAME,
             `\(.*\)libmadlib\.so',
            `\1../../modules/deep_learning/test/madlib_keras_iris.setup.sql_in'
)

CREATE OR REPLACE FUNCTION test_fit_multiple_model(
    test_function           VARCHAR,
    source_table            VARCHAR,
    model_output_table      VARCHAR,
    model_selection_table   VARCHAR,
    num_iterations          INTEGER,
    initial_schedule        VARCHAR
) RETURNS BOOLEAN AS
$$
    import sys
    plpy.info(sys.path("Before: {}".format(sys.path)))
    PythonFunctionBodyOnlyNoSchema(`deep_learning', `madlib_keras_fit_multiple_model')
    plpy.info("After: {}".format(sys.path))

    schema_madlib = 'madlib_installcheck_deep_learning'

    from madlib_keras_validator import FitMultipleInputValidator

    FitMultipleInputValidator.validate_input_shape = None

    # Initialize FitMultipleModel
    fit_mult = madlib_keras_fit_multiple_model.FitMultipleModel(
        schema_madlib,
        source_table,
        model_output_table,
        model_selection_table,
        num_iterations
    )

#   fit_mult = madlib_keras_fit_multiple_model.FitMultipleModel(**globals())

    if initial_schedule:
        fit_mult.schedule_tbl = initial_schedule
    fit_mult.DEBUG.mst_keys_enabled = True

    # Call test function
    fit_mult.__getattribute__(test_function)()

$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION test_fit_multiple_model(
    test_function           VARCHAR,
    source_table            VARCHAR,
    model_output_table      VARCHAR,
    model_selection_table   VARCHAR,
    num_iterations          INTEGER
) RETURNS BOOLEAN AS
$$
    SELECT test_fit_multiple_model($1, $2, $3, $4, $5, NULL);
$$ LANGUAGE SQL VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE TABLE dummy_source AS SELECT
    0 as id,
    NULL::REAL[] as dependent_var,
    NULL::TEXT as independent_var,
    0 as __dist_key__;

CREATE TABLE dummy_source_summary (
    source_table TEXT,
    output_table TEXT,
    dependent_varname TEXT,
    independent_varname TEXT,
    dependent_vartype       TEXT,
    class_values            TEXT[],
    buffer_size             INTEGER,
    normalizing_const       REAL,
    num_classes             TEXT,
    distribution_rules      TEXT,
    __internal_gpu_config__ TEXT
);
INSERT INTO dummy_source_summary VALUES('dummy_source', 'dummy_out', 'y', 'x', NULL, NULL, 1.0, '1', 'all_segments', '');

CREATE OR REPLACE FUNCTION test_init_schedule_tbl(
    model_selection_table   VARCHAR
) RETURNS BOOLEAN AS
$$
    SELECT test_fit_multiple_model('create_schedule',
        'dummy_source', 'dummy_output', $1, 1, 'dummy_sched'
    );
$$ LANGUAGE SQL VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

CREATE OR REPLACE FUNCTION test_rotate_schedule_tbl(
    initial_schedule        VARCHAR,
    model_selection_table   VARCHAR
) RETURNS BOOLEAN AS
$$
    SELECT test_fit_multiple_model('rotate_schedule',
        'dummy_source', 'dummy_output', $2, 1, $1
    );
$$ LANGUAGE SQL VOLATILE
m4_ifdef(`__HAS_FUNCTION_PROPERTIES__', `MODIFIES SQL DATA', `');

-- Mock version() function to convince the InputValidator this is the real madlib schema
CREATE FUNCTION madlib_installcheck_deep_learning.version() RETURNS VARCHAR AS
$$
    SELECT MADLIB_SCHEMA.version();
$$ LANGUAGE sql IMMUTABLE;

-- Mock fit_transition function, for testing
--  madlib_keras_fit_multiple_model() python code
CREATE FUNCTION madlib_installcheck_deep_learning.fit_transition(
    state                       BYTEA,
    dependent_var               BYTEA,
    independent_var             BYTEA,
    dependent_var_shape         INTEGER[],
    independent_var_shape       INTEGER[],
    model_architecture          TEXT,
    compile_params              TEXT,
    fit_params                  TEXT,
    dist_key                    INTEGER,
    dist_key_mapping            INTEGER[],
    current_seg_id              INTEGER,
    segments_per_host           INTEGER,
    images_per_seg              INTEGER[],
    use_gpus                    BOOLEAN,
    accessible_gpus_for_seg     INTEGER[],
    prev_serialized_weights     BYTEA,
    is_final_iteration          BOOLEAN
) RETURNS BYTEA AS
$$
    SELECT $1; -- Just return whatever was passed in
$$ LANGUAGE SQL STABLE;

-- Create mst table (maybe this should be moved to common setup file?
DROP TABLE IF EXISTS mst_table, mst_table_summary;
SELECT load_model_selection_table(
    'iris_model_arch',
    'iris_mst_table',
    ARRAY[1],
    ARRAY[
        $$loss='categorical_crossentropy',optimizer='Adam(lr=0.1)',metrics=['accuracy']$$,
        $$loss='categorical_crossentropy', optimizer='Adam(lr=0.01)',metrics=['accuracy']$$,
        $$loss='categorical_crossentropy',optimizer='Adam(lr=0.001)',metrics=['accuracy']$$
    ],
    ARRAY[
        $$batch_size=5,epochs=1$$,
        $$batch_size=10,epochs=1$$
    ]
);

-- Test init_schedule_tbl()
SELECT test_init_schedule_tbl('iris_mst_table');

DROP TABLE IF EXISTS schedule_table;

-- Test rotate_schedule()
SELECT test_rotate_schedule('current_schedule', 'mst_table');

SELECT test_fit_multiple_model('run_training', 'iris_data_packed', 'model_output', 'iris_mst_table', 5);
